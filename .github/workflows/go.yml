name: Go

on:
  push:
  pull_request:


jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.19
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Test
      run: |
        go test -v ./...
        go test -v -race ./...
 
    - name: Make dist
      run: |
        if [ ! -d dist ]; then
          mkdir dist
        fi

    - name: Build
      run: go build -v -o dist/govanityurls .

    - name: upload-binary
      uses: actions/upload-artifact@v2
      with: 
        path: dist

  bump_version:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump_version_and_push_tag.outputs.tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'
    - name: Bump version and push tag
      uses: clly/github-tag-action@1.24.0
      id: bump_version_and_push_tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
  build-docker-image:
    runs-on: ubuntu-latest
    needs: bump_version
    outputs:
      version: ${{ needs.bump_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      
      - name: Extract Tags
        id: extract-tags
        run: |
          TAGS="${{github.repository}}:latest"
          if [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          fi
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="${TAGS},${{github.repository}}:${MAJOR},${{github.repository}}:${MINOR}"
          fi
          if [[ ! -z $VERSION ]]; then
            TAGS="${TAGS},${{github.repository}}:${VERSION}"
          fi
          TAGS="${TAGS},${{github.repository}}:${GITHUB_SHA::8}"
          echo ::set-output name=tags::${TAGS}


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.extract-tags.outputs.tags }}
  create-release:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: dist
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ needs.build-docker-image.outputs.version }}
          release_name: Release ${{ needs.build-docker.image.outputs.version }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/artifact/govanityurls
          asset_name: govanityurls
          asset_content_type: application/octet-stream

